streams, redirection, pipes
	0		: input
	1		: output
	2		: error
	>>		: append instead of overwrite
	|		: redirect stream to another process' stream
	2>&1	: redirect error to output
	examples
		my_program < input_data > output_data
		make my_program > log 2>&1
global expressions
	!(a|b|c)
	(a|b|c)
	?	: match 1 character
	*	: match any number of characters
	[abc]
	[^abc]
	[a-z]
	\w
	\s
	\d
command-line expansion
	shell expands text before processing
	common patterns
		*			: all file names in directory except .file.txt
		?			: any single character except for .
		~			: tilde expansion
		A-{1,3}-D	: brace expansion. {1..3} enumerates
		$PATH		: parameter expansion
		$((1+2))	: arithmetic expansion
		$(ls)		: command substitution
		\			: cause following character to lose meaning
		'			: all characters lose special meaning
		"			: all but \, $
file test operators
	syntax
		if [ -f FILE && -f FILE2 ]; then
			...
		fi
	flags
		b	: block file
		c	: character file
		d	: directory
		e	: any type of file
		f	: regular file (not directory or device)
		G	: same group as user
		h	: symbolic link
		g	: sgid flag set
		k	: sticky bit flag
		w	: writable
		x	: executable
shell and environment variables
	variable_name=value
	export variable_name
	export variable_name=value
	echo $variable_name
arrays
	ARRAY=(v1 v2 ... vn)
	ARRAY[i]=v
	echo ${ARRAY[i]}  # avoid doing $ARRAY which prints first element
	echo ${ARRAY[*]}  # all elements, @ also ok
commands
	.			: source, run sh
	jobs		: list jobs. [1] 1384: [job num] proc id
	fg %1		: foreground
	bg 1384		: background
	kill %1		:
	wait %1		: wait until process is done
	suspend		:
	find		: file name. $find . -atime -print
				: $find . -name \*.old -exec rm -i {} \;
	which		: find exe location
	ln -s		: symlink (default hard), oldfile newfile
	grep		: file contents. $grep <opt> <regex> <files>
				: E = a or EE or (E) or E|E
				: or E* or E? or E\{n,m\} (n to m)
				: or [a-z] or [^a-z] (not a-z)
				: or ^ or $ (start or end)
	
	shell scripts
	a #!/bin/sh	: run as script by OS
	$?			: previous command exit code
	a || b && c	: conditional execution
	$2			: parameter passed to script
	$@			: sequence of arguments
		access using "$@"
		convert to array like v=("$@")
	$#			: number of arguments
	taskset		: run programs with computing resource limits
	. ./run.sh	: source the script (run in current shell)
	find . -name 'x'	: find directory/file
	find -L	: follow symlinks
	column -t -s ','	: format file
	head [-n x] file	: print first/last lines from file
	grep 'abc' .	: search contents of file
	date -d @1234	: useful date functions
	truncate -s 0 tmp.txt	:
examples
	a.sh x y
		echo "Username: $1";
		echo "Age: $2";  # 
	sh a.sh -f a -a b -u c
		while getopts u:a:f: flag
		do
			case "${flag}" in
				u) username=${OPTARG};;
				a) age=${OPTARG};;
				f) fullname=${OPTARG};;
			esac
		done
		echo "username: $username";...
	sh a.sh a b c d e
		i=1;
		for user in "$@"  # for loops loop over a sequence of variables
		do
			echo "Username - $i: $user";
			i=$((i+1));
		done
