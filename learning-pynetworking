socket
	control flow
		server
			socket
			bind
			listen
			accept
			recv
			send
			close
		client
			socket
			connect
			send
			recv
			close
	example code
		server
			with socket.socket(socket.AF_INET,socket.SOCK_STREAM) as s:  # address family internet, TCP (socket.SOCK_DGRAM is UDP), context manager type with close() method
				s.bind((HOST,PORT))
				s.listen()
				conn,addr=s.accept()  # blocking
				with conn:
					while True:
						data=conn.recv(1024)  # blocking
						if not data:
							break
						conn.sendall(data)
		client
			with [...] as s:
				s.connect((HOST,PORT))
				s.sendall(b'hello world')
				data=s.recv(1024)
httpserver
	example code
		from http.server import BaseHTTPRequestHandler, HTTPServer
		from io import BytesIO
		hostName = 'localHost'
		serverPort = 8080


		class MyServer(BaseHTTPRequestHandler):
			def do_GET(self):
				self.send_response(200)
				self.send_header("Content-type", "text/html")
				self.end_headers()
				self.wfile.write(b'hello world')

			def do_POST(self):
				content_length = int(self.headers['Content-Length'])
				body = self.rfile.read(content_length)
				self.send_response(200)
				self.end_headers()
				response = BytesIO()
				response.write(b'Received: ')
				response.write(body)
				self.wfile.write(response.getvalue())


		if __name__ == "__main__":
			webServer = HTTPServer((hostName, serverPort), MyServer)
			print("Server started http://%s:%s" % (hostName, serverPort))

			try:
				webServer.serve_forever()
			except KeyboardInterrupt:
				pass

			webServer.server_close()
			print("Server stopped.")

