programming model
	key value pairs for constants
	targets that can be linked together
	declarative but sequential
idea
	C/C++ involves 1. including header files correctly 2. linking files 3. meta-project information
	use configure_file(x.h.in x.h) to generate header files with meta-info to be included in project
	use target_include_directories to find header files
	use target_link_library to link files
common commands
	initialise
		cmake ../Step1	: initialise build dir with loc
		cmake --build .	: build here
	using find_package
		a function that adds all the targets in some package to the CMake namespace 
		works by having a Config.cmake file (case insensitive)
		Example
			cmake_minimum_required(VERSION 3.10)
			project(MyExeProject VERSION 1.0.0)

			# Make project-provided Find modules available
			list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

			find_package(SomePackage REQUIRED)
			add_executable(MyExe main.cpp)
			target_link_libraries(MyExe PRIVATE SomePrefix::LibName)
	regular usage
		CMakeLists.txt
			cmake_minimum_required(VERSION 3.10)

			# set the project name and version
			project(Tutorial VERSION 1.0)

			# specify the C++ standard
			set(CMAKE_CXX_STANDARD 11)
			set(CMAKE_CXX_STANDARD_REQUIRED True)

			# should we use our own math functions
			option(USE_MYMATH "Use tutorial provided math implementation" ON)

			# configure a header file to pass some of the CMake settings
			# to the source code
			configure_file(TutorialConfig.h.in TutorialConfig.h)

			# add the MathFunctions library
			if(USE_MYMATH)
			  add_subdirectory(MathFunctions)
			  list(APPEND EXTRA_LIBS MathFunctions)
			endif()

			# add the executable
			add_executable(Tutorial tutorial.cxx)

			target_link_libraries(Tutorial PUBLIC ${EXTRA_LIBS})

			# add the binary tree to the search path for include files
			# so that we will find TutorialConfig.h
			target_include_directories(Tutorial PUBLIC
									   "${PROJECT_BINARY_DIR}"
									   )
		TutorialConfig.h.in
			// the configured options and settings for Tutorial
			#define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@
			#define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@
			#cmakedefine USE_MYMATH
